// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cam_package/CLASS.cc.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./spherical_camera_cal.h"

// Camera operation implementations
namespace sym {

template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> SphericalCameraCal<Scalar>::FocalLength() const {
  // Total ops: 0

  // Input arrays
  const Eigen::Matrix<Scalar, 11, 1>& _self = Data();

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 1> _focal_length;

  _focal_length(0, 0) = _self[0];
  _focal_length(1, 0) = _self[1];

  return _focal_length;
}

template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> SphericalCameraCal<Scalar>::PrincipalPoint() const {
  // Total ops: 0

  // Input arrays
  const Eigen::Matrix<Scalar, 11, 1>& _self = Data();

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 1> _principal_point;

  _principal_point(0, 0) = _self[2];
  _principal_point(1, 0) = _self[3];

  return _principal_point;
}

template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> SphericalCameraCal<Scalar>::PixelFromCameraPoint(
    const Eigen::Matrix<Scalar, 3, 1>& point, const Scalar epsilon, Scalar* const is_valid) const {
  // Total ops: 51

  // Input arrays
  const Eigen::Matrix<Scalar, 11, 1>& _self = Data();

  // Intermediate terms (12)
  const Scalar _tmp0 = std::pow(point(1, 0), Scalar(2));
  const Scalar _tmp1 = std::pow(point(0, 0), Scalar(2));
  const Scalar _tmp2 = _tmp0 + _tmp1 + epsilon;
  const Scalar _tmp3 = std::sqrt(_tmp2);
  const Scalar _tmp4 = std::atan2(_tmp3, point(2, 0));
  const Scalar _tmp5 = std::min<Scalar>(_tmp4, _self[4] - epsilon);
  const Scalar _tmp6 = _self[5] *
                           [&]() {
                             const Scalar base = _tmp5;
                             return base * base * base;
                           }() +
                       _self[6] * std::pow(_tmp5, Scalar(5)) +
                       _self[7] * std::pow(_tmp5, Scalar(7)) +
                       _self[8] * std::pow(_tmp5, Scalar(9)) + _tmp5;
  const Scalar _tmp7 = _tmp6 / _tmp3;
  const Scalar _tmp8 = std::pow(_tmp6, Scalar(2)) / _tmp2;
  const Scalar _tmp9 = 2 * _tmp8 * point(0, 0) * point(1, 0);
  const Scalar _tmp10 = _tmp0 * _tmp8;
  const Scalar _tmp11 = _tmp1 * _tmp8;

  // Output terms (2)
  Eigen::Matrix<Scalar, 2, 1> _pixel;

  _pixel(0, 0) = _self[0] * (_self[10] * _tmp9 + _self[9] * _tmp10 + 3 * _self[9] * _tmp11 +
                             _tmp7 * point(0, 0)) +
                 _self[2];
  _pixel(1, 0) = _self[1] * (3 * _self[10] * _tmp10 + _self[10] * _tmp11 + _self[9] * _tmp9 +
                             _tmp7 * point(1, 0)) +
                 _self[3];

  if (is_valid != nullptr) {
    Scalar& _is_valid = (*is_valid);

    _is_valid = std::max<Scalar>(0, (((_self[4] - _tmp4) > 0) - ((_self[4] - _tmp4) < 0)));
  }

  return _pixel;
}

template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> SphericalCameraCal<Scalar>::PixelFromCameraPointWithJacobians(
    const Eigen::Matrix<Scalar, 3, 1>& point, const Scalar epsilon, Scalar* const is_valid,
    Eigen::Matrix<Scalar, 2, 10>* const pixel_D_cal,
    Eigen::Matrix<Scalar, 2, 3>* const pixel_D_point) const {
  // Total ops: 321

  // Input arrays
  const Eigen::Matrix<Scalar, 11, 1>& _self = Data();

  // Intermediate terms (79)
  const Scalar _tmp0 = -epsilon;
  const Scalar _tmp1 = std::pow(point(1, 0), Scalar(2));
  const Scalar _tmp2 = std::pow(point(0, 0), Scalar(2));
  const Scalar _tmp3 = _tmp1 + _tmp2 + epsilon;
  const Scalar _tmp4 = std::sqrt(_tmp3);
  const Scalar _tmp5 = std::atan2(_tmp4, point(2, 0));
  const Scalar _tmp6 = std::min<Scalar>(_tmp5, _self[4] + _tmp0);
  const Scalar _tmp7 = std::pow(_tmp6, Scalar(5));
  const Scalar _tmp8 = std::pow(_tmp6, Scalar(7));
  const Scalar _tmp9 = std::pow(_tmp6, Scalar(9));
  const Scalar _tmp10 = [&]() {
    const Scalar base = _tmp6;
    return base * base * base;
  }();
  const Scalar _tmp11 =
      _self[5] * _tmp10 + _self[6] * _tmp7 + _self[7] * _tmp8 + _self[8] * _tmp9 + _tmp6;
  const Scalar _tmp12 = Scalar(1.0) / (_tmp4);
  const Scalar _tmp13 = _tmp11 * _tmp12;
  const Scalar _tmp14 = point(0, 0) * point(1, 0);
  const Scalar _tmp15 = std::pow(_tmp11, Scalar(2));
  const Scalar _tmp16 = Scalar(1.0) / (_tmp3);
  const Scalar _tmp17 = _tmp15 * _tmp16;
  const Scalar _tmp18 = 2 * _self[10];
  const Scalar _tmp19 = _tmp17 * _tmp18;
  const Scalar _tmp20 = _tmp1 * _tmp17;
  const Scalar _tmp21 = _tmp17 * _tmp2;
  const Scalar _tmp22 = 3 * _tmp21;
  const Scalar _tmp23 =
      _self[9] * _tmp20 + _self[9] * _tmp22 + _tmp13 * point(0, 0) + _tmp14 * _tmp19;
  const Scalar _tmp24 = 2 * _tmp17;
  const Scalar _tmp25 = _tmp14 * _tmp24;
  const Scalar _tmp26 = 3 * _tmp20;
  const Scalar _tmp27 =
      _self[10] * _tmp21 + _self[10] * _tmp26 + _self[9] * _tmp25 + _tmp13 * point(1, 0);
  const Scalar _tmp28 = _self[4] - _tmp5;
  const Scalar _tmp29 = _tmp11 * _tmp16;
  const Scalar _tmp30 = 6 * _self[9];
  const Scalar _tmp31 = _tmp2 * _tmp30;
  const Scalar _tmp32 = _tmp29 * _tmp31;
  const Scalar _tmp33 = 4 * _tmp14;
  const Scalar _tmp34 = _self[10] * _tmp33;
  const Scalar _tmp35 = _tmp29 * _tmp34;
  const Scalar _tmp36 = 2 * _self[9];
  const Scalar _tmp37 = _tmp1 * _tmp36;
  const Scalar _tmp38 = _tmp29 * _tmp37;
  const Scalar _tmp39 = _tmp12 * point(0, 0);
  const Scalar _tmp40 = _tmp18 * _tmp2;
  const Scalar _tmp41 = _tmp29 * _tmp40;
  const Scalar _tmp42 = _self[9] * _tmp33;
  const Scalar _tmp43 = _tmp29 * _tmp42;
  const Scalar _tmp44 = 6 * _self[10];
  const Scalar _tmp45 = _tmp1 * _tmp44;
  const Scalar _tmp46 = _tmp29 * _tmp45;
  const Scalar _tmp47 = _tmp12 * point(1, 0);
  const Scalar _tmp48 = _tmp29 * _tmp9;
  const Scalar _tmp49 = _tmp11 / (_tmp3 * std::sqrt(_tmp3));
  const Scalar _tmp50 = _tmp15 / std::pow(_tmp3, Scalar(2));
  const Scalar _tmp51 = _self[9] * point(0, 0);
  const Scalar _tmp52 = _self[10] * point(1, 0);
  const Scalar _tmp53 = 4 * _tmp50;
  const Scalar _tmp54 = _tmp2 * _tmp53;
  const Scalar _tmp55 = 6 * _tmp17;
  const Scalar _tmp56 = _tmp50 * [&]() {
    const Scalar base = point(0, 0);
    return base * base * base;
  }();
  const Scalar _tmp57 = (Scalar(9) / Scalar(2)) * _self[8] * std::pow(_tmp6, Scalar(8));
  const Scalar _tmp58 = ((((_tmp0 + _tmp28) > 0) - ((_tmp0 + _tmp28) < 0)) + 1) /
                        (_tmp3 + std::pow(point(2, 0), Scalar(2)));
  const Scalar _tmp59 = _tmp58 * point(2, 0);
  const Scalar _tmp60 = _tmp57 * _tmp59;
  const Scalar _tmp61 = (Scalar(5) / Scalar(2)) * _self[6] * std::pow(_tmp6, Scalar(4));
  const Scalar _tmp62 = _tmp59 * _tmp61;
  const Scalar _tmp63 = (Scalar(7) / Scalar(2)) * _self[7] * std::pow(_tmp6, Scalar(6));
  const Scalar _tmp64 = _tmp59 * _tmp63;
  const Scalar _tmp65 = (Scalar(3) / Scalar(2)) * _self[5] * std::pow(_tmp6, Scalar(2));
  const Scalar _tmp66 = _tmp59 * _tmp65;
  const Scalar _tmp67 = (Scalar(1) / Scalar(2)) * _tmp59;
  const Scalar _tmp68 =
      _tmp39 * _tmp60 + _tmp39 * _tmp62 + _tmp39 * _tmp64 + _tmp39 * _tmp66 + _tmp39 * _tmp67;
  const Scalar _tmp69 = _tmp29 * _tmp68;
  const Scalar _tmp70 = _self[9] * point(1, 0);
  const Scalar _tmp71 = -_tmp14 * _tmp49 + _tmp19 * point(0, 0) + _tmp24 * _tmp70;
  const Scalar _tmp72 = _tmp1 * _tmp53;
  const Scalar _tmp73 = _tmp50 * [&]() {
    const Scalar base = point(1, 0);
    return base * base * base;
  }();
  const Scalar _tmp74 =
      _tmp47 * _tmp60 + _tmp47 * _tmp62 + _tmp47 * _tmp64 + _tmp47 * _tmp66 + _tmp47 * _tmp67;
  const Scalar _tmp75 = _tmp29 * _tmp74;
  const Scalar _tmp76 = _tmp4 * _tmp58;
  const Scalar _tmp77 = -_tmp57 * _tmp76 - _tmp61 * _tmp76 - _tmp63 * _tmp76 - _tmp65 * _tmp76 -
                        Scalar(1) / Scalar(2) * _tmp76;
  const Scalar _tmp78 = _tmp29 * _tmp77;

  // Output terms (4)
  Eigen::Matrix<Scalar, 2, 1> _pixel;

  _pixel(0, 0) = _self[0] * _tmp23 + _self[2];
  _pixel(1, 0) = _self[1] * _tmp27 + _self[3];

  if (is_valid != nullptr) {
    Scalar& _is_valid = (*is_valid);

    _is_valid = std::max<Scalar>(0, (((_tmp28) > 0) - ((_tmp28) < 0)));
  }

  if (pixel_D_cal != nullptr) {
    Eigen::Matrix<Scalar, 2, 10>& _pixel_D_cal = (*pixel_D_cal);

    _pixel_D_cal(0, 0) = _tmp23;
    _pixel_D_cal(1, 0) = 0;
    _pixel_D_cal(0, 1) = 0;
    _pixel_D_cal(1, 1) = _tmp27;
    _pixel_D_cal(0, 2) = 1;
    _pixel_D_cal(1, 2) = 0;
    _pixel_D_cal(0, 3) = 0;
    _pixel_D_cal(1, 3) = 1;
    _pixel_D_cal(0, 4) =
        _self[0] * (_tmp10 * _tmp32 + _tmp10 * _tmp35 + _tmp10 * _tmp38 + _tmp10 * _tmp39);
    _pixel_D_cal(1, 4) =
        _self[1] * (_tmp10 * _tmp41 + _tmp10 * _tmp43 + _tmp10 * _tmp46 + _tmp10 * _tmp47);
    _pixel_D_cal(0, 5) =
        _self[0] * (_tmp32 * _tmp7 + _tmp35 * _tmp7 + _tmp38 * _tmp7 + _tmp39 * _tmp7);
    _pixel_D_cal(1, 5) =
        _self[1] * (_tmp41 * _tmp7 + _tmp43 * _tmp7 + _tmp46 * _tmp7 + _tmp47 * _tmp7);
    _pixel_D_cal(0, 6) =
        _self[0] * (_tmp32 * _tmp8 + _tmp35 * _tmp8 + _tmp38 * _tmp8 + _tmp39 * _tmp8);
    _pixel_D_cal(1, 6) =
        _self[1] * (_tmp41 * _tmp8 + _tmp43 * _tmp8 + _tmp46 * _tmp8 + _tmp47 * _tmp8);
    _pixel_D_cal(0, 7) =
        _self[0] * (_tmp31 * _tmp48 + _tmp34 * _tmp48 + _tmp37 * _tmp48 + _tmp39 * _tmp9);
    _pixel_D_cal(1, 7) =
        _self[1] * (_tmp40 * _tmp48 + _tmp42 * _tmp48 + _tmp45 * _tmp48 + _tmp47 * _tmp9);
    _pixel_D_cal(0, 8) = _self[0] * (_tmp20 + _tmp22);
    _pixel_D_cal(1, 8) = _self[1] * _tmp25;
    _pixel_D_cal(0, 9) = _self[0] * _tmp25;
    _pixel_D_cal(1, 9) = _self[1] * (_tmp21 + _tmp26);
  }

  if (pixel_D_point != nullptr) {
    Eigen::Matrix<Scalar, 2, 3>& _pixel_D_point = (*pixel_D_point);

    _pixel_D_point(0, 0) =
        _self[0] * (-2 * _tmp1 * _tmp50 * _tmp51 + _tmp13 + _tmp19 * point(1, 0) - _tmp2 * _tmp49 -
                    _tmp30 * _tmp56 + _tmp32 * _tmp68 + _tmp34 * _tmp69 + _tmp37 * _tmp69 +
                    _tmp39 * _tmp68 + _tmp51 * _tmp55 - _tmp52 * _tmp54);
    _pixel_D_point(1, 0) = _self[1] * (-_tmp18 * _tmp56 + _tmp40 * _tmp69 + _tmp42 * _tmp69 -
                                       _tmp45 * _tmp50 * point(0, 0) + _tmp46 * _tmp68 +
                                       _tmp47 * _tmp68 - _tmp54 * _tmp70 + _tmp71);
    _pixel_D_point(0, 1) =
        _self[0] *
        (-_self[10] * _tmp72 * point(0, 0) - 6 * _tmp2 * _tmp50 * _tmp70 + _tmp32 * _tmp74 +
         _tmp34 * _tmp75 - _tmp36 * _tmp73 + _tmp38 * _tmp74 + _tmp39 * _tmp74 + _tmp71);
    _pixel_D_point(1, 1) =
        _self[1] * (-_tmp1 * _tmp49 + _tmp13 + _tmp24 * _tmp51 - _tmp40 * _tmp50 * point(1, 0) +
                    _tmp41 * _tmp74 + _tmp42 * _tmp75 - _tmp44 * _tmp73 + _tmp46 * _tmp74 +
                    _tmp47 * _tmp74 - _tmp51 * _tmp72 + _tmp52 * _tmp55);
    _pixel_D_point(0, 2) =
        _self[0] * (_tmp31 * _tmp78 + _tmp34 * _tmp78 + _tmp37 * _tmp78 + _tmp39 * _tmp77);
    _pixel_D_point(1, 2) =
        _self[1] * (_tmp40 * _tmp78 + _tmp42 * _tmp78 + _tmp45 * _tmp78 + _tmp47 * _tmp77);
  }

  return _pixel;
}

// Print implementations
std::ostream& operator<<(std::ostream& os, const SphericalCameraCald& a) {
  const Eigen::IOFormat fmt(Eigen::StreamPrecision, Eigen::DontAlignCols, ", ", "\n", "[", "]");
  os << "<SphericalCameraCald " << a.Data().transpose().format(fmt) << ">";
  return os;
}

std::ostream& operator<<(std::ostream& os, const SphericalCameraCalf& a) {
  const Eigen::IOFormat fmt(Eigen::StreamPrecision, Eigen::DontAlignCols, ", ", "\n", "[", "]");
  os << "<SphericalCameraCalf " << a.Data().transpose().format(fmt) << ">";
  return os;
}

}  // namespace sym

// Concept implementations for this class
#include "./ops/spherical_camera_cal/storage_ops.h"

// Explicit instantiation
template class sym::SphericalCameraCal<double>;
template class sym::SphericalCameraCal<float>;
